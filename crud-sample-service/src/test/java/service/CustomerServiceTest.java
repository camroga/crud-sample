package service;import dto.CustomerDto;import exception.DataNotFoundException;import org.junit.Assert;import org.junit.Before;import org.junit.Rule;import org.junit.Test;import org.junit.rules.ExpectedException;import java.util.ArrayList;import java.util.List;import static org.mockito.Mockito.mock;import static org.mockito.Mockito.when;public class CustomerServiceTest {    @Rule    public ExpectedException thrown = ExpectedException.none();    private Customer customerInterface;    private List<CustomerDto> customers;    @Before    public void setup() {        customerInterface = mock(CustomerService.class);        initCustomer();    }    private void initCustomer() {        customers = new ArrayList<>();        CustomerDto customer = new CustomerDto();        customer.setFirstName("Steve");        customer.setSurname("Jobs");        customer.setStreetAddress("San Francisco");        customer.setDob("California, United States");        customers.add(customer);    }    @Test    public void getDataOk() {        when(customerInterface.find()).thenReturn(customers);        when(customerInterface.getData()).thenCallRealMethod();        Assert.assertFalse(customerInterface.getData().isEmpty());    }    @Test    public void getDataNotFoundException() {        thrown.expect(DataNotFoundException.class);        when(customerInterface.find()).thenThrow(new DataNotFoundException());        when(customerInterface.getData()).thenCallRealMethod();        customerInterface.getData();    }    @Test    public void getDataException() {        thrown.expect(Exception.class);        when(customerInterface.find()).thenThrow(new Exception());        when(customerInterface.getData()).thenCallRealMethod();        customerInterface.getData();    }}