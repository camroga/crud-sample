package rest;import exception.DataNotFoundException;import exception.ServiceException;import service.AbstractService;import service.ParamWrapper;import javax.ws.rs.core.Response;import java.util.logging.Level;import java.util.logging.Logger;public class BaseWs {    private static final Logger LOGGER = Logger.getLogger(BaseWs.class.getName());    Response execute(final AbstractService abstractService, final ParamWrapper paramWrapper) {        Response response;        String responseData;        String messageError = "";        try {            responseData = (String) abstractService.getData(paramWrapper);            response = Response.ok(responseData).build();        } catch (DataNotFoundException ex) {            messageError = ex.getMessage();            response = Response.status(Response.Status.NOT_FOUND).entity(this.messageToJson(ex.getMessage())).build();        } catch (ServiceException ex) {            messageError = ex.getMessage();            response = Response.status(Response.Status.INTERNAL_SERVER_ERROR).              entity(this.messageToJson(Response.Status.INTERNAL_SERVER_ERROR.getReasonPhrase())).build();        } finally {            if (!messageError.isEmpty())            {                LOGGER.log(Level.INFO,"Class Source Error: [{0}], MessageError :[{1}]",                  new String[]{abstractService.getClass().getSimpleName(), messageError});            }        }        return response;    }    Response execute(final AbstractService abstractService) {        Response response;        String responseData;        String messageError = "";        try {            responseData = (String) abstractService.getData();            response = Response.ok(responseData).build();        } catch (DataNotFoundException ex) {            messageError = ex.getMessage();            response = Response.status(Response.Status.NOT_FOUND).entity(this.messageToJson(ex.getMessage())).build();        } catch (ServiceException ex) {            messageError = ex.getMessage();            response = Response.status(Response.Status.INTERNAL_SERVER_ERROR).              entity(this.messageToJson(Response.Status.INTERNAL_SERVER_ERROR.getReasonPhrase())).build();        } finally {            if (!messageError.isEmpty())            {                LOGGER.log(Level.INFO,"Class Source Error: [{0}], MessageError :[{1}]",                  new String[]{abstractService.getClass().getSimpleName(), messageError});            }        }        return response;    }    private String messageToJson(String messageDescription) {        return "{\"message\":\" " + messageDescription + "\"}";    }}